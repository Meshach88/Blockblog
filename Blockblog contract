// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract blogNetwork{
    string public name; 

    uint public Counter = 0;

    mapping(uint=>Post) public blogPosts;

    struct Post{
        uint id;
        string content;
        uint tip;
        address payable author;
    }

    event PostCreated(
        uint id,
        string content,
        uint tip,
        address payable author
    );
    
    event PostTipped(
        uint id,
        string content,
        uint tip,
        address payable author
    );

    constructor() public{
        name = "Post Created";
    }

    function createPost(string memory _content) public{
        //require valid content
        require(bytes(_content).length > 0);
        //incrementing posts
        Counter++;
        //adding posts to the list of posts
        blogPosts[Counter] = Post(Counter, _content, 0, msg.sender);
        //trigger event
       emit PostCreated(Counter, _content, 0, msg.sender);
    }

    function tipPost(uint idx) public payable{
        //validate the id
        require(idx>0 && idx<=Counter);
        // fetch the post based on id and increment the tip amount of the desired author
        Post memory _t = blogPosts[idx];
        address payable _author = _t.author;
        // transfer the amount of paid ether to author
        _t.author.transfer(msg.value);
        // increment tip amount reflected on website
        _t.tip+= msg.value;
        // update the post with incremented tip amount
        blogPosts[idx] = _t;
        emit PostTipped(idx, _t.content, _t.tip, _author);
    }
}
